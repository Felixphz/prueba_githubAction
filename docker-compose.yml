version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: fullstack_postgres
    environment:
      POSTGRES_DB: fullstack_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fullstack_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Flask
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fullstack_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/fullstack_app
      - SECRET_KEY=your-secret-key-here
      - FLASK_ENV=production
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fullstack_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fullstack_frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - fullstack_network
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:5000

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: fullstack_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - fullstack_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  fullstack_network:
    driver: bridge
